from LIB.analyseElf import GetElf
from LIB.analyseElf import FILEHEADER
from LIB.analyseElf import PROGRAMHEADER
from LIB.displayHeader import display

# a suppr
from LIB.displayHeader import displayProgramHeader
# a suppr

def recupData():
    HexContent = GetElf("EXECUTABLES/echoOui.elf")
    fildeHeaderContent = FILEHEADER()
    fildeHeaderContent = recupDataFileHeader(fildeHeaderContent,HexContent)
    #display(fildeHeaderContent)

    programHeaderContent = PROGRAMHEADER()
    programHeaderContent = recupDataProgramHeader(programHeaderContent,HexContent)
    #displayProgramHeader(programHeaderContent)
    display(fildeHeaderContent,programHeaderContent)

def recupDataFileHeader(fileHeaderContent: str,HexContent: str):

    for i in range(0, 8, 2):      # 32bit/64bit(0x00 + 4 bytes)
        fileHeaderContent.e_ident.ei_mag += HexContent[i]+HexContent[i+1]+' '

    for i in range(8, 10):        # 32bit/64bit(0x04 + 1 bytes)
        fileHeaderContent.e_ident.ei_class += HexContent[i]

    for i in range(10, 12):       # 32bit/64bit(0x05 + 1 bytes)
        fileHeaderContent.e_ident.ei_data += HexContent[i]

    for i in range(12, 14):       # 32bit/64bit(0x06 + 1 bytes)
        fileHeaderContent.e_ident.ei_version += HexContent[i]

    for i in range(14, 16):       # 32bit/64bit(0x07 + 1 bytes)
        fileHeaderContent.e_ident.ei_osabi += HexContent[i]

    for i in range(16, 18):       # 32bit/64bit(0x08 + 1 bytes)
        fileHeaderContent.e_ident.ei_abiversion += HexContent[i]

    for i in range(18, 25):       # 32bit/64bit(0x09 + 7 bytes)
        fileHeaderContent.e_ident.ei_pad += HexContent[i]+HexContent[i+1]+' '

    for i in range(25, 29, 2):    # 32bit/64bit(0x10 + 2 bytes)
        fileHeaderContent.e_type += HexContent[i]+HexContent[i+1]+' '

    for i in range(29, 33, 2):    # 32bit/64bit(0x12 + 2 bytes)
        fileHeaderContent.e_machine += HexContent[i]+HexContent[i+1]+' '

    for i in range(33, 41, 2):    # 32bit/64bit(0x14 + 4 bytes)
        fileHeaderContent.e_version += HexContent[i]+HexContent[i+1]+' '

    #on part de l'idée qu'on est en 64 bits pour l'instant

    for i in range(41, 57, 2):    # 32bit(0x18 + 4 bytes)/64bit(0x18 + 8 bytes)
        fileHeaderContent.e_entry += HexContent[i]+HexContent[i+1]+' '

    for i in range(57, 73, 2):    # 32bit(0x1C + 4 bytes)/64bit(0x20 + 8 bytes)
        fileHeaderContent.e_phoff += HexContent[i]+HexContent[i+1]+' '

    for i in range(73, 89, 2):    # 32bit(0x20 + 4 bytes)/64bit(0x28 + 8 bytes)
        fileHeaderContent.e_shoff += HexContent[i]+HexContent[i+1]+' '

    for i in range(89, 97, 2):    # 32bit(0x24 + 4 bytes)/64bit(0x30 + 4 bytes)
        fileHeaderContent.e_flags += HexContent[i]+HexContent[i+1]+' '

    for i in range(97, 101, 2):   # 32bit(0x28 + 2 bytes)/64bit(0x34 + 2 bytes)
        fileHeaderContent.e_ehsize += HexContent[i]+HexContent[i+1]+' '

    for i in range(101, 105, 2):  # 32bit(0x2A + 2 bytes)/64bit(0x36 + 2 bytes)
        fileHeaderContent.e_phentsize += HexContent[i]+HexContent[i+1]+' '

    for i in range(105, 109, 2):  # 32bit(0x2C + 2 bytes)/64bit(0x38 + 2 bytes)
        fileHeaderContent.e_phnum += HexContent[i]+HexContent[i+1]+' '

    for i in range(109, 113, 2):  # 32bit(0x2E + 2 bytes)/64bit(0x3A + 2 bytes)
        fileHeaderContent.e_shentsize += HexContent[i]+HexContent[i+1]+' '

    for i in range(113, 117, 2):  # 32bit(0x30 + 2 bytes)/64bit(0x3C + 2 bytes)
        fileHeaderContent.e_shnum += HexContent[i]+HexContent[i+1]+' '

    for i in range(117, 121, 2):  # 32bit(0x32 + 2 bytes)/64bit(0x3E + 2 bytes)
        fileHeaderContent.e_shstrndx += HexContent[i]+HexContent[i+1]+' '
    
    #END# 32bit(0x34 + 2 bytes)/64bit(0x40 + 2 bytes)
    return fileHeaderContent

def recupDataProgramHeader(programHeaderContent: str,HexContent: str ):
#on part encore sur l'idée qu'on est sur du 64 bit
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_type += HexContent[i]+HexContent[i+1]+' '
    for i in range(129, 137, 2):      # 64bit(0x04 + 4 bytes)
        programHeaderContent.p_flags += HexContent[i]+HexContent[i+1]+' '
    for i in range(129, 137, 2):      # 32bit(0x04 + 4 bytes) / 64bit(0x08 + 8 bytes)
        programHeaderContent.p_offset += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 
        programHeaderContent.p_vaddr += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_paddr += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_filesz += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_memsz += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_flags += HexContent[i]+HexContent[i+1]+' '
    for i in range(121, 129, 2):      # 32bit/64bit(0x00 + 4 bytes)
        programHeaderContent.p_alin += HexContent[i]+HexContent[i+1]+' '
    
    return programHeaderContent