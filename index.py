def main():

    HexContent = GetElf("echoOui.elf")
    #print(HexContent)
    
    #print(len(HexContent))
    #Extraire le File Header du ELF
 
    #1 Byte = 8 bit = deux caracatere hex et un Byte = octet = 8 bit
    # et un Byte n'est pas tout le temps 8 bits par contre 1 octet = 8bit 

    #Magic Number ELF 4 byte
    print("Magic Number")
    for i in range(0,8):
        print(HexContent[i], end=" ")

    
    #Format de l'elf 0 pour 32 bit et 2 pour 64 bit
    print()
    print("Format")
    for i in range(8,10):
        print(HexContent[i], end=" ")

    print()
    print("Endianness")
    for i in range(10,12):
        print(HexContent[i], end=" ")

    print()
    #1 signigie que c'est la version original du elf
    print("Version Original du elf")
    for i in range(12,14):
        print(HexContent[i], end=" ")

    print()
    #Systeme d'exploitation cible 0x00	Système V 0x01	HP-UX 0x02	NetBSD 0x03	Linux 0x04	GNU Hurd 0x06	Solaris 0x07	AIX 0x08	IRIX 0x09	FreeBSD 0x0A	Tru64 0x0B	Novell Modesto 0x0C	OpenBSD 0x0D	OpenVMS 0x0E	NonStop Kernel 0x0F	AROS 0x10	Fenix ​​OS 0x11	CloudABI
    print("Systeme d'exploitation du ELF : ")
    for i in range(14,16):
        print(HexContent[i], end=" ")

    print()
    print("ABI Version")
    for i in range(16,18):
        print(HexContent[i], end=" ")

    print()
    #espace pas utilisé
    print("Pas utilisé :")
    for i in range(18,32):
        print(HexContent[i], end=" ")
    
    print()
    #Object Type File 
    print("Object Type File : ")
    for i in range(32,36):
        print(HexContent[i], end=" ")

    print()
    #intructuion set architecture
    print("Architecture :")
    for i in range(36,40):
        print(HexContent[i], end=" ")

    print()    
    #Version (1 = original version)
    print("Version : ")
    for i in range(40,48):
        print(HexContent[i], end=" ")

    print()
    #Entry point execution du code
    print("Entry Point : ")
    for i in range(48,66):
        print(HexContent[i], end=" ")

    print()
    #Entry p off (entry point du header table)
    print("Entry Point Header Table : ")
    for i in range(66,82):
        print(HexContent[i], end=" ")  

    print()
    #Entry Point de la section
    print("Entry Point Section : ")
    for i in range(82,98):
        print(HexContent[i], end=" ")  

    print()
    #e_flags
    print("FLag : ")
    for i in range(98,106):
        print(HexContent[i], end=" ")  

    print()
    #e_ehsize
    print("E Size: ")
    for i in range(106,110):
        print(HexContent[i], end=" ")  

    print()
    #e_phentsize
    print("e_phentsize: ")
    for i in range(110,114):
        print(HexContent[i], end=" ") 

    print()
    #e_phnum
    print("e_phentsize: ")
    for i in range(110,114):
        print(HexContent[i], end=" ")

    print()
    #e_hentsize
    print("e_phentsize: ")
    for i in range(114,118):
        print(HexContent[i], end=" ")

    print()
    #e_shnum
    print("e_shnum: ")
    for i in range(118,122):
        print(HexContent[i], end=" ")

    print()
    #e_shstrndx
    print("e_shstrndx: ")
    for i in range(122,126):
        print(HexContent[i], end=" ")

    #	End of ELF Header (size)   #

    #P type type of segement
    print()
    print("p_type : ")
    for i in range(126,134):
        print(HexContent[i], end=" ")


    #Flag segement
    print()
    print("p_flag : ")
    for i in range(134,142):
        print(HexContent[i], end=" ")

    #Extraire le programme Header Table




    #Extraire les sections du ELF


    #Extraire Section Header Table du ELF




#Récupération de la chaine Hexadecimal du ELF
def GetElf(input_file: str):
    
    with open(input_file, mode='rb') as f:
        return f.read().hex()


main()